// 判断字符串是否符合时间的格式
function TimeUtil(){
	
}

// 支持YYYY-mm-DD [HH:MM:SS]
// 支持YYYY/mm/DD [HH:MM:SS]
// 支持YYYY_mm_DD [HH:MM:SS]
// 支持YYYY.mm.DD [HH:MM:SS]
// 支持YYYY年mm月DD日 [HH时mm分ss秒]
TimeUtil.prototype.validate = function(timeStr){
	var dateExp = new RegExp(/((^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._年])(10|12|0?[13578])([-\/\._月])(3[01]|[12][0-9]|0?[1-9])日?)|(^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._年])(11|0?[469])([-\/\._月])(30|[12][0-9]|0?[1-9]))日?|(^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._年])(0?2)([-\/\._月])(2[0-8]|1[0-9]|0?[1-9])日?)|(^([2468][048]00)([-\/\._年])(0?2)([-\/\._月])(29)日?)|(^([3579][26]00)([-\/\._年])(0?2)([-\/\._月])(29)日?$)|(^([1][89][0][48])([-\/\._年])(0?2)([-\/\._月])(29)日?)|(^([2-9][0-9][0][48])([-\/\._年])(0?2)([-\/\._月])(29)日?)|(^([1][89][2468][048])([-\/\._年])(0?2)([-\/\._月])(29)日?)|(^([2-9][0-9][2468][048])([-\/\._年])(0?2)([-\/\._月])(29)日?)|(^([1][89][13579][26])([-\/\._年])(0?2)([-\/\._月])(29)日?)|(^([2-9][0-9][13579][26])([-\/\._年])(0?2)([-\/\._月])(29)日?))((\s+)(0?\d{1}|1\d{1}|2[0-3]):(0?|[1-5])\d{1}:(0?|[1-5])\d{1})?$/);
	return dateExp.test(timeStr);
	
}

TimeUtil.prototype.compare = function(timeStr1, timeStr2){
	
}

TimeUtil.prototype.format = function(timeStr, format = 'YYYY-mm-DD HH:MM:SS'){
	
}